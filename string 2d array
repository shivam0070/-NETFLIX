{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOHCHkyIzH+FccXmkfP4jtf",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/shivam0070/-NETFLIX/blob/main/string%202d%20array\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "08dIIUGk4XgQ"
      },
      "outputs": [],
      "source": [
        "def isLowerCase(ch):\n",
        "  return ch >= 'a' and ch <= 'z'\n",
        "def isUpperCase(ch):\n",
        "  return ch >= 'A' and ch <= 'z'\n",
        "def isDigit(ch):\n",
        "  return ch >= '0' and ch <= '9'\n",
        "def convertSmallCharacterLarge(ch):\n",
        "  return chr(ord(ch)) - ord('A') + ord('a')\n",
        "\n",
        "\n",
        "def upper(str):\n",
        "  l = len(str)\n",
        "  ans = \" \"\n",
        "\n",
        "  for i in range(1):\n",
        "    if isLowerCase(str[i]):\n",
        "      ans += str[i]\n",
        "    return ans\n",
        "def lower(str):\n",
        "    l = len(str)\n",
        "    ans = \"\"\n",
        "\n",
        "    for i in range(l):\n",
        "        if isUpperCase(str[i]):\n",
        "            ans += convertLargeCharacterSmall(str[i])\n",
        "        else:\n",
        "            ans += str[i]\n",
        "\n",
        "    return ans\n",
        "def toggleCharacters():\n",
        "    l = len(str)\n",
        "    ans = \"\"\n",
        "\n",
        "    for i in range(l):\n",
        "        if isUpperCase(str[i]):\n",
        "            ans += convertLargeCharacterSmall(str[i])\n",
        "        elif isLowerCase(str[i]):\n",
        "            ans += convertSmallCharacterLarge(str[i])\n",
        "        else:\n",
        "            ans += str[i]\n",
        "\n",
        "    return an\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class Solution:\n",
        "    def isLowerCase(self,ch):\n",
        "        return ch >= 'a' and ch <= 'z'\n",
        "\n",
        "    def isUpperCase(self,ch):\n",
        "        return ch >= 'A' and ch <= 'Z'\n",
        "\n",
        "    def convertLargeCharacterSmall(self,ch):\n",
        "        return chr(ord(ch) - ord('A') + ord('a'))\n",
        "    \n",
        "    def convertSmallCharacterLarge(self,ch):\n",
        "        return chr(ord(ch) - ord('a') + ord('A'))\n",
        "\n",
        "\n",
        "\n",
        "    def lower(self,str):\n",
        "        l = len(str)\n",
        "        ans = \"\"\n",
        "\n",
        "        for i in range(l):\n",
        "            if self.isUpperCase(str[i]):\n",
        "                ans += self.convertLargeCharacterSmall(str[i])\n",
        "            else:\n",
        "                ans += str[i]\n",
        "\n",
        "        return ans\n",
        "    \n",
        "    def capitalizeTitle(self, title: str) -> str:\n",
        "        l = len(title)\n",
        "        if l <= 2:\n",
        "            return self.lower(title)\n",
        "        \n",
        "        words = title.split(\" \")\n",
        "        wordsLen = len(words)\n",
        "        \n",
        "        res = \"\"\n",
        "        for i in range(wordsLen):\n",
        "            word = words[i]\n",
        "            if len(word) <= 2:\n",
        "                res += self.lower(word)\n",
        "            else:\n",
        "                ch = word[0]\n",
        "                if self.isLowerCase(ch):\n",
        "                    res += self.convertSmallCharacterLarge(ch)\n",
        "                else:\n",
        "                    res += ch\n",
        "                \n",
        "                res += self.lower(word[1:len(word)])\n",
        "                \n",
        "            if i != wordsLen - 1:\n",
        "                res += \" \"\n",
        "            \n",
        "        return res"
      ],
      "metadata": {
        "id": "wTBITom6AIxI"
      },
      "execution_count": 3,
      "outputs": []
    }
  ]
}